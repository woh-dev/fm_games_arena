{"version":3,"sources":["Components/Game.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","data","editors_choice","title","platform","score","genre","Component","Nav","id","type","placeholder","onChange","handleSearch","name","handleSort","selected","disabled","value","require","App","componentWillMount","_callee","regenerator_default","wrap","_context","prev","next","_this","apiCall","stop","setState","games","visible","filterGames","e","state","filter","game","toLowerCase","includes","target","sortGames","sortType","sort","b","Components_Nav","length","map","Components_Game","key","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2ef2d44.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        {this.props.data.editors_choice === 'Y' ? <i className=\"material-icons choice\">stars</i> : <i className=\"material-icons not-choice\">star_border</i>}\n        <div className=\"game-name\">\n          <h4>{this.props.data.title}</h4>\n        </div>\n        <div className=\"game-platform\">\n        {this.props.data.platform}\n        </div>\n        <div className=\"game-details\">\n          {this.props.data.score} stars | Genre: {this.props.data.genre}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"nav\">\n        <input id=\"search\" type=\"search\" placeholder=\"Search...\" onChange={this.props.handleSearch}></input>\n        <select id=\"sort\" name=\"sort\" onChange={this.props.handleSort}>\n          <option selected disabled>Sort By...</option>\n          <option value=\"title\">Title</option>\n          <option value=\"platform\">Platform</option>\n          <option value=\"score\">Score</option>\n          <option value=\"genre\">Genre</option>\n          <option value=\"editors_choice\">Editors Choice</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport Game from './Components/Game'\nimport Nav from './Components/Nav'\nimport './App.css';\nconst data = require('./data.json')\n\nclass App extends Component {\n  componentWillMount = async () => {\n    this.apiCall()\n  }\n\n  apiCall = () => {\n    // Mock fetch and set state.\n    this.setState({\n      games: data,\n      visible: data,\n    })\n  }\n\n  filterGames = (e) => {\n    // Convert to lowercase and filter based on title.\n    const visible = this.state.games.filter((game) => {\n      return game.title.toLowerCase().includes(e.target.value.toLowerCase())\n    })\n    // Update state;\n    this.setState({\n      visible\n    })\n  }\n\n  sortGames = (e) => {\n    const sortType = e.target.value;\n    const visible = this.state.visible.sort((a, b) => {\n      if (sortType === 'platform' || sortType === 'title' || sortType === 'genre') {\n        // Make sure text sorts based on lowercase.\n        if (a[sortType].toLowerCase() < b[sortType].toLowerCase()) {\n          return -1;\n        }\n        if (a[sortType].toLowerCase() > b[sortType].toLowerCase()) {\n          return 1;\n        }\n        return 0;\n      } else {\n        // Sort editors choice and score in inverse order.\n        if (a[sortType] < b[sortType]) {\n          return 1;\n        }\n        if (a[sortType] > b[sortType]) {\n          return -1;\n        }\n        return 0;\n\n      }\n    })\n    // Update state;\n    this.setState({\n      visible\n    })\n  }\n\n\n\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Nav handleSearch={this.filterGames} handleSort={this.sortGames}/>\n        <div id=\"Content\">\n          {this.state.visible.length ? this.state.visible.map(game => <Game key={JSON.stringify(game)} data={game}/>) : <h4 id=\"missing\">Hmmm... Sorry, We Can't Find That.</h4>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}